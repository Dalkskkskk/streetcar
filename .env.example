# This is 32 character encryption key used to encrypt certain data in the database, you can generate this by using `openssl rand -hex 16`, or a password generator.
KEY=

# Values from the Discord developer portal
CLIENT_ID=
CLIENT_SECRET=
BOT_TOKEN=

# The defaults here automatically work for the development environment.
# For production, change localhost:3300 to your domain.
# ----------------------------------------------------------------------------------------------------------------------------------------
# This is the URL you and other bot managers will use to access the dashboard to manage server configs. 
# If you are using a domain, fill in https://DOMAIN, else if you are using a IP, fill in https://IP
DASHBOARD_URL=https://localhost:3300
# This is used by the dashboard to access the bot internals; also used by Discord to redirect you back to the dashboard after you log in. 
# Use your dashboard URL, but add `/api` at the end 
API_URL=https://localhost:3300/api

# These are staff to help manage the bot itself. These are not server staff that would manage bot configs.
# If there will be multiple people managing the bot, separate the user IDs with commas.
STAFF=

# A comma-separated list of server IDs that should be allowed by default
DEFAULT_ALLOWED_SERVERS=

# When using the Docker-based development environment, this is only used internally. The API will be available at localhost:DOCKER_DEV_WEB_PORT/api.
API_PORT=3000

# Phisherman is a live database used for identifying malicious, scam, and phishing links. Uncomment the row if you have an api key.
#PHISHERMAN_API_KEY=

# The user ID and group ID that should be used within the Docker containers
# This should match your own user ID and group ID. Run `id -u` and `id -g` to find them.
DOCKER_USER_UID=
DOCKER_USER_GID=

#
# DOCKER (DEVELOPMENT)
# NOTE: You only need to fill in these values for running the development environment. See production config further below.
#

# The port used to access the dashboard
# If you have a webserver or another service that uses port 3300 running on the host computer, change the port to something else, e.g. 3301
DOCKER_DEV_WEB_PORT=3300

# The MySQL database running in the container is exposed to the host on this port,
# allowing access with database tools such as DBeaver
DOCKER_DEV_MYSQL_PORT=3001
# Password for the Zeppelin database user
# Do not use $'"(){}# in the password
DOCKER_DEV_MYSQL_PASSWORD=
# Password for the MySQL root user
# Do not use $'"(){}# in the password
DOCKER_DEV_MYSQL_ROOT_PASSWORD=

# The development environment container has an SSH server that you can connect to.
# This is the port that server is exposed to the host on.
DOCKER_DEV_SSH_PORT=3002
DOCKER_DEV_SSH_PASSWORD=password

# If your user has a different UID than 1000, you might have to fill that in here to avoid permission issues
#DOCKER_DEV_UID=1000

#
# DOCKER (PRODUCTION)
# NOTE: You only need to fill in these values for running the production environment. See development config above.
#

# If you are using a domain to access the dashboard, put the domain here.
# Put only the domain (e.g. zeppelin.gg) and not the URL.
DOCKER_PROD_DOMAIN=
# This is the port used to access the dashboard. 
# If you have a webserver or another service that uses port 443 running on the host computer, change the port to something else, e.g. 444
DOCKER_PROD_WEB_PORT=443
# The MySQL database running in the container is exposed to the host on this port,
# allowing access with database tools such as DBeaver
DOCKER_PROD_MYSQL_PORT=3001
# Password for the Zeppelin database user
# Do not use $'"(){}# in the password
DOCKER_PROD_MYSQL_PASSWORD=
# Password for the MySQL root user
# Do not use $'"(){}# in the password
DOCKER_PROD_MYSQL_ROOT_PASSWORD=

# You only need to set these if you're running an external database.
# In a standard setup, the database is run in a docker container.
#DB_HOST=
#DB_USER=
#DB_PASSWORD=
#DB_DATABASE=
